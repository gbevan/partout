/*
    Partout [Everywhere] - Policy-Based Configuration Management for the
    Data-Driven-Infrastructure.

    Copyright (C) 2016 Graham Lee Bevan <graham.bevan@ntlworld.com>

    This file is part of Partout.

    Partout is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/*jslint node: true, nomen: true */
'use strict';
/*global p2*/

// make parent node_modules available to sync'd manifest
//module.paths = module.paths.concat(module.parent.paths);

var Q = require('q'),
    u = require('util'),
    console = require('better-console'),
    wget = require('wget-improved'),
    _ = require('lodash'),
    pfs = p2.require('pfs');

p2

/**
 * @module wget
 *
 * @description
 * Role: wget
 * ================
 * ```javascript
 * p2
 * .wget('url', {
 *   to: 'target_path_and_file_name'
 * })
 * ```
 *
 */
.role('wget', {
  p2: function (title, opts) {

    var deferred = Q.defer();

    pfs.pExists(opts.to)
    .then(function (exists) {

      if (exists) {
        console.info('wget target file already exists:', opts.to, 'skipping');
        return deferred.resolve();
      }

      var wget_opts = _.cloneDeep(opts);
      delete wget_opts.to;

      var tmp_to = opts.to + '_temp';

      var d = wget.download(title, tmp_to, wget_opts);

      d.on('error', function (err) {
        deferred.reject(err);
      });

      d.on('start', function (fileSize) {
        console.info('wget downloading file size:', fileSize);
      });

      d.on('end', function (output) {
        pfs.pRename(tmp_to, opts.to)
        .then(function () {
          console.info('wget complete:', output);
          deferred.resolve();
        })
        .done(null, function (err) {
          deferred.reject(err);
        });
      });

//      d.on('progress', function (progress) {
//        console.log('wget progress:', progress);
//      });
    });

    return deferred.promise;
  }
})
;
