/*
    Partout [Everywhere] - Policy-Based Configuration Management for the
    Data-Driven-Infrastructure.

    Copyright (C) 2016 Graham Lee Bevan <graham.bevan@ntlworld.com>

    This file is part of Partout.

    Partout is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/*jslint node: true, nomen: true */
'use strict';
/*global p2*/

// make parent node_modules available to sync'd manifest
//module.paths = module.paths.concat(module.parent.paths);

var Mustache = require('mustache'),
    console = require('better-console'),
    Q = require('q'),
    u = require('util'),
    pfs = new (p2.require('pfs'))();

p2

/**
 * @module set_env
 *
 * @description
 * Role: set_env
 * ================
 * ```javascript
 * p2
 * .set_env('env_var_name', {
 *   ensure: 'present|absent',
 *   file: filename,  // or
 *   value: value,    // or
 *   url: url,  // TODO, or
 * })
 * ```
 */
.role('set_env', {
  p2: function (title, opts) {
    var deferred = Q.defer(),
        opts_deferred = Q.defer();

    //console.warn('set_env: title:', title);

    if (!opts.ensure) {
      opts.ensure = (opts.value === undefined ? 'absent' :'present');
    }

    if (opts.value) {
      opts_deferred.resolve(opts.value);

    } else if (opts.file) {

      opts.file = Mustache.render(opts.file, {
        title: title,
        opts: opts,
        f: p2.facts
      });

      pfs.pReadFile(opts.file)
      .then(function (data) {
        if (data) {
          data = data.toString().trim();
        }
        opts_deferred.resolve(data);
      });

    } else {
      opts_deferred.resolve();  // no value will unset var
    }

    opts_deferred
    .promise
    .then(function (data) {
      if (opts.ensure === 'present') {

        if (typeof(data) === 'string') {
          data = Mustache.render(data, {
            title: title,
            opts: opts,
            f: p2.facts
          });
        }

        process.env[title] = data;
        console.info(u.format('Set Env Var "%s" = "%s"', title, data));
        deferred.resolve();

      } else  if (opts.ensure === 'absent') {
        delete process.env[title];
        deferred.resolve();

      } else {
        deferred.reject(new Error('Invalid ensure value in set_env'));
      }

    })
    .done(null, function (err) {
      deferred.reject(err);
    });

    return deferred.promise;
  }
});
