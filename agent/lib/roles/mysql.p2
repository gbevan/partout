/*
    Partout [Everywhere] - Policy-Based Configuration Management for the
    Data-Driven-Infrastructure.

    Copyright (C) 2016 Graham Lee Bevan <graham.bevan@ntlworld.com>

    This file is part of Partout.

    Partout is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/*jslint node: true, nomen: true */
'use strict';
/*global p2*/

// make parent node_modules available to sync'd manifest
//module.paths = module.paths.concat(module.parent.paths);

var heredoc = require('heredoc'),
    mysql = require('mysql'),
    Q = require('q'),
    u = require('util');

p2

/**
 * @module mysql_connect
 *
 * @description
 * Role: mysql_connect
 * ==============
 * ```javascript
 * p2
 * .mysql_connect(p2.facts.os_hostname, {
 *   host: hostname,
 *   user: username,
 *   password: mypassword,
 *   database: mydb,
 *   ... any mysql connection parameter
 * })
 * ```
 *
 * saves connection in p2._mysql_connections[title].
 * Use hostname (e.g. p2.facts.os_hostname) for title and you
 * can let later mysql_* calls default their connection.
 */
.role('mysql_connect', {
  p2: function (title, opts) {

    if (!p2._mysql_connections) {
      p2._mysql_connections = {};
    }

    if (!p2._mysql_connections[title]) {
      var c = mysql.createConnection(opts);
      c.connect();
      p2._mysql_connections[title] = c;
    }

  }
})

/**
 * @module mysql_database
 *
 * @description
 * Role: mysql_database
 * ==============
 * ```javascript
 * p2
 * .mysql_database('keystone', {
 *   ensure: 'present',
 *   connection: 'name' (defaults to current hostname)
 * })
 * ```
 */
.role('mysql_database', {
  p2: function (title, opts) {
    var deferred = Q.defer(),
        c;

    if (opts.connection) {
      c = p2._mysql_connections[opts.connection];
    } else {
      c = p2._mysql_connections[p2.facts.os_hostname];
    }

    // Get status for this database
    Q.nfcall(c.query.bind(c), 'SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = ?', [title])
    .done(function (check_res) {
      var rows = check_res[0],
          fields = check_res[1];

      if (opts.ensure === 'present' && rows.length === 0) {
        console.info('Creating MySQL/MariaDB database ' + title);

        Q.nfcall(c.query.bind(c), 'CREATE DATABASE ??', [title])
        .done(function (create_res) {
          deferred.resolve();
        });

      } else if (opts.ensure === 'absent' && rows.length !== 0) {
        console.info('Dropping MySQL/MariaDB database ' + title);

        Q.nfcall(c.query.bind(c), 'DROP DATABASE ??', [title])
        .done(function (drop_res) {
          deferred.resolve();
        });

      } else {
        deferred.resolve();
      }

    });

    return deferred.promise;
  }
})

/**
 * @module mysql_grant
 *
 * @description
 * Role: mysql_grant
 * ==============
 * ```javascript
 * p2
 * mysql_grant('whatever_title', {
 *   ensure: 'present|absent',
 *   privileges: 'ALL PRIVILEGES|etc...' | [...],
 *   // ON
 *   objecttype: 'TABLE|FUNCTION|PROCEDURE',  // NOT SUPPORTED
 *   privlevel: 'dbname.*',
 *   // TO
 *   userspecs: {user:username,host:hostname} | [{user:username,host:hostname}, ...],
 *   // IDENTIFIED BY
 *   identifiedby: '*****'
 * })
 * ```
 */
.role('mysql_grant', {
  p2: function (title, opts) {
    //console.log('mysql_grant opts:', opts);
    var c;

    if (opts.connection) {
      c = p2._mysql_connections[opts.connection];
    } else {
      c = p2._mysql_connections[p2.facts.os_hostname];
    }
    //console.log('c:', c);



    // select * from SCHEMA_PRIVILEGES where grantee="'nova'@'localhost'" and table_schema="nova";

    var privlevel_parts = opts.privlevel.split('/\./'),
        dbname = privlevel_parts[0];

    return Q.nfcall(
      c.query.bind(c),
      //'SELECT user,host FROM mysql.user WHERE USER = ? AND HOST = ?',  // TABLE is CASE SENSITIVE HERE !!!!
      'SELECT * FROM information_schema.SCHEMA_PRIVILEGES WHERE grantee="?@?" and table_schema=?',
      [
        opts.userspecs.user,
        opts.userspecs.host,
        dbname
      ]
    )
//    .fail(function (err) {
//      deferred.reject(err);
//    })
    .then(function (check_res) {
      var rows = check_res[0],
          fields = check_res[1];
      //console.log('select rows:', rows.length);

      if (opts.ensure === 'present' && rows.length === 0) {
        return Q.nfcall(
          c.query.bind(c),
          'GRANT ' + opts.privileges + ' ON ' + opts.privlevel + ' TO ?@? IDENTIFIED BY ?',
          [
            //(opts.objecttype || ''),
            //opts.privlevel,
            opts.userspecs.user,
            opts.userspecs.host,
            opts.identifiedby
          ]
        );

      } else if (opts.ensure === 'absent' && rows.length !== 0) {
        return Q.nfcall(
          c.query.bind(c),
          'REVOKE ALL ON ?? FROM ?@?',
          [
            //(opts.objecttype || ''),
            opts.privlevel,
            opts.userspecs.user,
            opts.userspecs.host
          ]
        );

      } else {
        return;
      }

    });

  }
})


;
