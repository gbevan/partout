/*
    Partout [Everywhere] - Policy-Based Configuration Management for the
    Data-Driven-Infrastructure.

    Copyright (C) 2016 Graham Lee Bevan <graham.bevan@ntlworld.com>

    This file is part of Partout.

    Partout is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/*jslint node: true, nomen: true */
'use strict';
/*global p2*/

// make parent node_modules available to sync'd manifest
//module.paths = module.paths.concat(module.parent.paths);

var utils = p2.require('utils'),
    u = require('util'),
    fs = require('fs'),
    path = require('path'),
    heredoc = require('heredoc'),
    uuid = require('uuid'),
    pfs = p2.require('pfs'),
    Q = require('q');

p2

/**
 * @module str_replace_infile
 *
 * @description
 * Role: str_replace_infile
 * ================
 * ```javascript
 * .str_replace_infile('/path/to/file', {
 *   regex: /^ content to match/mg,   // <- treats whole file as a single string
 *   with: 'string to replace with',
 *   watch: true|false  // optional - watch the file for changes to reapply policy
 *   TODO: template: 'moustach templated string to replace with'
 * })
 * ```
 */
.role('str_replace_infile', {
  p2: function (title, opts) {
    var _watch_state = (opts.watch ? true : p2._watch_state);

    var replace_infile = function () {
      return pfs.pReadFile(title, 'utf8')
      .then(function (contents) {
        var newcontents = contents.replace(opts.regex, opts.with);
        if (newcontents !== contents) {
  //        console.log('newcontents:', newcontents);
          return pfs.pWriteFile(title, newcontents)
          .then(function () {
            return Q({result: 'changed'});
          });
        }
        return Q.resolve();
      });
    };

    return replace_infile()
    .then(function (res) {
      if (_watch_state && global.p2_agent_opts.daemon) {
        p2.P2_watch(title, function (next_event_cb) { // watch_action_fn from P2_watch()
          utils.dlog('-Watcher Triggered>>>--------------------------------');
          utils.dlog('watcher triggered. file:', title, 'this:', this);

          replace_infile()
          .then(function () {
            next_event_cb();
          });
        });
      }

      return Q(res);
    });
  }
})
;
