/*
    Partout [Everywhere] - Policy-Based Configuration Management for the
    Data-Driven-Infrastructure.

    Copyright (C) 2016 Graham Lee Bevan <graham.bevan@ntlworld.com>

    This file is part of Partout.

    Partout is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/*jslint node: true, nomen: true */
'use strict';
/*global p2*/

// make parent node_modules available to sync'd manifest
module.paths = module.paths.concat(module.parent.paths);

var utils = new (p2.require('utils'))(),
    u = require('util'),
    fs = require('fs'),
    path = require('path'),
    heredoc = require('heredoc'),
    uuid = require('uuid'),
    Q = require('q'),
    _ = require('lodash');

p2

/**
 * @module openstack_user
 *
 * @description
 * Role: openstack_user
 * ================
 * ```javascript
 * .openstack_user('admin', {
 *   password: 'password',
 *   domain: 'default',
 *   ensure: 'present|absent'
 * })
 * ```
 */
.role('openstack_user', {
  facts: function (deferred, facts_so_far, title, opts) {
    var facts = {};

    deferred.resolve(facts);
  },

  p2: function (title, opts) {

    // get status
    return utils.runCmd(u.format('openstack user list -f json'))
    .then(function (res) {
      var rc = res[0],
          stdout = res[1],
          stderr = res[2];

      if (rc !== 0) {
        return Q.reject(new Error('openstack user list failed stderr:' + stderr));
      }
      stdout = stdout.trim();
      //console.log('stdout:', stdout);

      var users_list = JSON.parse((stdout || '[]')),
          users_byName = {};
      users_list.forEach(function (user) {
        users_byName[user.Name] = user;
      });

      if (opts.ensure === 'present') {
        if (!users_byName[title]) {
          // create user
          console.info('Creating openstack user ', title);

          // openstack user create --domain default --password ******** admin
          p2
          .command(u.format(
            'openstack user create --domain "%s" --password "%s" "%s"',
            opts.domain,
            opts.password,
            title
          ));
        }

      } else if (opts.ensure === 'absent') {
        if (users_byName[title]) {
          // delete user
          console.info('Deleting openstack user ', title);
          p2
          .command(u.format(
            'openstack user set --disable "%s"',
            title
          ))
          .command(u.format(
            'openstack user delete --domain "%s" %s"',
            opts.domain,
            title
          ));
        }

      } else {
        return Q.reject(new Error('Invalid ensure'));
      }
    });
  }

})

;
