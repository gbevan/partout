/*
    Partout [Everywhere] - Policy-Based Configuration Management for the
    Data-Driven-Infrastructure.

    Copyright (C) 2016 Graham Lee Bevan <graham.bevan@ntlworld.com>

    This file is part of Partout.

    Partout is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/*jslint node: true, nomen: true */
'use strict';
/*global p2*/

// make parent node_modules available to sync'd manifest
module.paths = module.paths.concat(module.parent.paths);

var console = require('better-console'),
    heredoc = require('heredoc'),
    path = require('path'),
    u = require('util'),
    //forge = require('node-forge'),
    pfs = p2.require('pfs');

p2

/**
 * @module openstack_compute
 *
 * @description
 * Role: openstack_compute
 * ================
 * ```javascript
 * p2
 * .openstack_compute('compute', {
 *   ip: 'compute_ip_address',
 *   controller_ip: 'controller_ip_address',
 *   rabbit_pass: 'rabbit password',
 *   nova_user_pass: 'nova user password',
 *   neutron_user_pass: 'neutron user password'
 * })
 * ```
 */
.role('openstack_compute', {
  p2: function (title, opts) {
    p2
    .node(function (f) {
      return f.os_dist_id === 'ubuntu' && p2.hasClass('openstack_compute');
    })

    .file('/etc/modules', {
      ensure: 'present',
      content: {template: path.join(__dirname, 'files', 'compute', 'modules_template')},
    })
    .on('file:/etc/modules:changed', function () {
      p2
      .command('modprobe br_netfilter')
      ;
    })

    .package('multipath-tools')
    .package('nova-compute')

    .ini_file('/etc/nova/nova-compute.conf', {
      cfg: {
        libvirt: {
          virt_type: 'kvm'
        }
      }
    })

//    .file('/etc/nova/nova.conf', {
//      ensure: 'present',
//      content: {template: path.join(__dirname, 'files', 'compute', 'nova_template.conf')},
//      parms: {
//        controller_ip: opts.controller_ip,
//        nova_user_pass: opts.nova_user_pass,
//        neutron_user_pass: opts.neutron_user_pass,
//        rabbit_host: opts.rabbit_host,
//        rabbit_pass: opts.rabbit_pass,
//        virt_type: (p2.facts.cpuinfo.hw_accel_enabled ? 'kvm' : 'qemu')
//      }
//    })

    .ini_file('/etc/nova/nova.conf', {
      cfg: {
        DEFAULT: {
          auth_strategy: 'keystone',
          firewall_driver: 'nova.virt.firewall.NoopFirewallDriver',
          my_ip: '{{ f.os_nics.br0.ipv4.address }}',
          transport_url: 'rabbit://openstack:{{ opts.parms.rabbit_pass }}@controller',
          use_neutron: 'True'
        },
        cinder: {
          os_region_name: 'RegionOne'
        },
        keystone_authtoken: {
          auth_uri: 'http://{{ opts.parms.controller_ip }}:5000',
          auth_url: 'http://{{ opts.parms.controller_ip }}:35357',
          memcached_servers: '{{ opts.parms.controller_ip }}:11211',
          auth_type: 'password',
          project_domain_name: 'default',
          user_domain_name: 'default',
          project_name: 'service',
          username: 'nova',
          password: '{{ opts.parms.nova_user_pass }}'
        },
        glance: {
          api_servers: 'http://{{ opts.parms.controller_ip }}:9292'
        },
        neutron: {
          url: 'http://{{ opts.parms.controller_ip }}:9696',
          auth_url: 'http://{{ opts.parms.controller_ip }}:35357',
          auth_type: 'password',
          project_domain_name: 'default',
          user_domain_name: 'default',
          region_name: 'RegionOne',
          project_name: 'service',
          username: 'neutron',
          password: '{{ opts.parms.neutron_user_pass }}'
        },
        oslo_concurrency: {
          lock_path: '/var/lib/nova/tmp'
        },
        vnc: {
          enabled: 'True',
          vncserver_listen: '0.0.0.0',
          vncserver_proxyclient_address: '$my_ip',
          novncproxy_base_url: 'http://{{ opts.parms.controller_ip }}:6080/vnc_auto.html'
        }
      },
      parms: {
        controller_ip: opts.controller_ip,
        nova_user_pass: opts.nova_user_pass,
        neutron_user_pass: opts.neutron_user_pass,
        rabbit_host: opts.rabbit_host,
        rabbit_pass: opts.rabbit_pass,
        virt_type: (p2.facts.cpuinfo.hw_accel_enabled ? 'kvm' : 'qemu')
      }
    })

    .on('ini_file:/etc/nova/nova.conf:changed', function () {
      p2
      .service('nova-compute', { ensure: 'stopped' })
      ;
    })


    .package('neutron-linuxbridge-agent')

//    .file('/etc/neutron/neutron.conf', {
//      ensure: 'present',
//      content: {template: path.join(__dirname, 'files', 'compute', 'neutron_template.conf')},
//      parms: {
//        controller_ip: opts.controller_ip,
//        //nova_user_pass: opts.nova_user_pass,
//        neutron_user_pass: opts.neutron_user_pass,
//        rabbit_host: opts.rabbit_host,
//        rabbit_pass: opts.rabbit_pass,
//        //virt_type: (p2.facts.cpuinfo.hw_accel_enabled ? 'kvm' : 'qemu')
//      }
//    })

    .ini_file('/etc/neutron/neutron.conf', {
      cfg: {
        DEFAULT: {
          auth_strategy: 'keystone',
          transport_url: 'rabbit://openstack:{{ opts.parms.rabbit_pass }}@controller'
        },
        keystone_authtoken: {
          auth_uri: 'http://{{ opts.parms.controller_ip }}:5000',
          auth_url: 'http://{{ opts.parms.controller_ip }}:35357',
          memcached_servers: '{{ opts.parms.controller_ip }}:11211',
          auth_type: 'password',
          project_domain_name: 'default',
          user_domain_name: 'default',
          project_name: 'service',
          username: 'neutron',
          password: '{{ opts.parms.neutron_user_pass }}'
        }
      },
      parms: {
        controller_ip: opts.controller_ip,
        //nova_user_pass: opts.nova_user_pass,
        neutron_user_pass: opts.neutron_user_pass,
        rabbit_host: opts.rabbit_host,
        rabbit_pass: opts.rabbit_pass,
        //virt_type: (p2.facts.cpuinfo.hw_accel_enabled ? 'kvm' : 'qemu')
      }
    })

    .on('ini_file:/etc/neutron/neutron.conf:changed', function () {
      p2
      .service('nova-compute', { ensure: 'stopped' })
      .service('neutron-linuxbridge-agent', { ensure: 'stopped' })
      ;
    })

//    .file('/etc/neutron/plugins/ml2/linuxbridge_agent.ini', {
//      ensure: 'present',
//      content:{template: path.join(__dirname, 'files', 'compute', 'linuxbridge_agent_template.ini')}
//    })

    .ini_file('/etc/neutron/plugins/ml2/linuxbridge_agent.ini', {
      cfg: {
        linux_bridge: {
          //physical_interface_mappings: 'provider:veth1',
        },
        securitygroup: {
          enable_security_group: 'True',
          firewall_driver: 'neutron.agent.linux.iptables_firewall.IptablesFirewallDriver'
        },
        vxlan: {
          enable_vxlan: 'True',
          l2_population: 'True',
          local_ip: '{{ f.os_nics.br0.ipv4.address }}'
        }
      }
    })

    .on('ini_file:/etc/neutron/plugins/ml2/linuxbridge_agent.ini:changed', function () {
      p2
      .service('neutron-linuxbridge-agent', { ensure: 'stopped' })
      ;
    })

    .service('nova-compute', { ensure: 'running', enabled: true })
    .service('neutron-linuxbridge-agent', { ensure: 'running', enabled: true })

    ;
  }
})

;
