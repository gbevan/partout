/*
    Partout [Everywhere] - Policy-Based Configuration Management for the
    Data-Driven-Infrastructure.

    Copyright (C) 2016 Graham Lee Bevan <graham.bevan@ntlworld.com>

    This file is part of Partout.

    Partout is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/*jslint node: true, nomen: true */
'use strict';
/*global p2*/

// make parent node_modules available to sync'd manifest
module.paths = module.paths.concat(module.parent.paths);

var heredoc = require('heredoc'),
    u = require('util'),
    path = require('path');

p2

/**
 * .openstack_cinder('', {
 *   lvm_filter_list: [ 'a/vdc/', etc... ],
 *   cinder_db_pass: '*****',
 *   cinder_user_pass: '*****',
 *   rabbit_host: 'controller1',
 *   rabbit_pass: '*****',
 *   glance_host: 'controller1',
 *   controller_host: 'controller1'
 * })
 */
.role('openstack_cinder', {
  p2: function (title, opts) {
    opts.lvm_filter_list = (opts.lvm_filter_list || []);
    opts.lvm_filter_list.push('r/.*/'); // reject everything else by default

    var filter_parm = '',
        first = true;

    opts.lvm_filter_list.forEach(function (f) {
      if (first) {
        first = false;
        filter_parm += u.format('"%s"', f);
      } else {
        filter_parm += u.format(', "%s"', f);
      }
    });

    p2
    .node(function (f) {
      return f.os_dist_id === 'ubuntu' && p2.hasClass('openstack_cinder');
    })

    .package('qemu')
    .package('lvm2')

    .str_replace_infile('/etc/lvm/lvm.conf', {
      regex: /^\s*filter\s*=.*$/mg,
      with: u.format('    filter = [ %s]', filter_parm)
    })

    .package('cinder-volume')
    .package('python-mysqldb')

    .file('/etc/cinder/cinder.conf', {
      ensure: 'present',
      content:{template: path.join(__dirname, 'files', 'cinder', 'cinder_conf_template.conf')},
      parms: {
        cinder_db_pass: opts.cinder_db_pass,
        cinder_user_pass: opts.cinder_user_pass,
        rabbit_pass: opts.rabbit_pass,
        rabbit_host: opts.rabbit_host,
        glance_host: opts.glance_host,
        controller_host: opts.controller_host
      }
    })

    .on('file:/etc/cinder/cinder.conf:changed', function () {
      p2
      .service('tgt', {ensure: 'stopped'})
      .service('tgt', {ensure: 'running'})
      .service('cinder-volume', {ensure: 'stopped'})
      .service('cinder-volume', {ensure: 'running'})
      ;
    })

    .file('/var/lib/cinder/cinder.sqlite', {ensure: 'absent'})

    ;
  }
})

;
