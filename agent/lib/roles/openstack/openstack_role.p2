/*
    Partout [Everywhere] - Policy-Based Configuration Management for the
    Data-Driven-Infrastructure.

    Copyright (C) 2016 Graham Lee Bevan <graham.bevan@ntlworld.com>

    This file is part of Partout.

    Partout is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/*jslint node: true, nomen: true */
'use strict';
/*global p2*/

// make parent node_modules available to sync'd manifest
module.paths = module.paths.concat(module.parent.paths);

var utils = new (p2.require('utils'))(),
    u = require('util'),
    fs = require('fs'),
    path = require('path'),
    heredoc = require('heredoc'),
    uuid = require('uuid'),
    Q = require('q'),
    _ = require('lodash');

p2

/**
 * @module openstack_role
 *
 * @description
 * Role: openstack_role
 * ================
 * ```javascript
 * .openstack_role('admin', {
 *   project: 'admin',
 *   user: 'admin',
 *   ensure: 'present|absent'
 * })
 * ```
 */
.role('openstack_role', {
  facts: function (deferred, facts_so_far, title, opts) {
    var facts = {};

    deferred.resolve(facts);
  },

  p2: function (title, opts) {

    // get status
    return utils.runCmd(u.format('openstack role list -f json'))
    .then(function (res) {
      var rc = res[0],
          stdout = res[1],
          stderr = res[2];

      if (rc !== 0) {
        return Q.reject(new Error('openstack role list failed'));
      }
      stdout = stdout.trim();
      //console.log('stdout:', stdout);

      var roles_list = JSON.parse((stdout || '[]')),
          roles_byName = {};
      roles_list.forEach(function (role) {
        roles_byName[role.Name] = role;
      });

      if (opts.ensure === 'present') {
        var role_create_deferred = Q.defer();

        if (!roles_byName[title]) {
          // create role
          console.info('Creating openstack role', title);

          // openstack role create --domain default --password ******** admin
//          p2
//          .command(u.format(
//            'openstack role create "%s"',
//            title
//          ))
//          ;

          role_create_deferred.resolve(
            utils.runCmd(u.format(
              'openstack role create "%s"',
              title
            ))
          );

        } else {
          role_create_deferred.resolve();
        }

        return role_create_deferred
        .promise
        .then(function () {

          return utils.runCmd(u.format('openstack role show %s --format json', title))
          .then(function (res) {
            var rc = res[0],
                stdout = res[1],
                stderr = res[2];

            if (rc !== 0) {
              return Q.reject(new Error('openstack role show ' + title + ' failed'));
            }

            var role = JSON.parse(stdout || '{}');

            if (!role.id) {
              return Q.reject(new Error('Failed to get role ' + title));
            }

            return utils.runCmd(u.format('openstack user show %s --format json', opts.user))
            .then(function (res) {
              var rc = res[0],
                  stdout = res[1],
                  stderr = res[2];

              if (rc !== 0) {
                return Q.reject(new Error('openstack user show ' + opts.user + ' failed'));
              }

              var user = JSON.parse(stdout || '{}');

              if (!user.id) {
                return Q.reject(new Error('Failed to get user ' + opts.user));
              }

              return utils.runCmd(u.format('openstack project show %s --format json', opts.project))
              .then(function (res) {
                var rc = res[0],
                    stdout = res[1],
                    stderr = res[2];

                if (rc !== 0) {
                  return Q.reject(new Error('openstack project show ' + opts.project + ' failed'));
                }

                var project = JSON.parse(stdout || '{}');

                if (!project.id) {
                  return Q.reject(new Error('Failed to get project ' + opts.project));
                }

                return utils.runCmd('openstack role assignment list --format json')
                .then(function (res) {
                  var rc = res[0],
                      stdout = res[1],
                      stderr = res[2];

                  if (rc !== 0) {
                    return Q.reject(new Error('openstack role assignment list failed'));
                  }

                  var role_assignments_list = JSON.parse(stdout || '[]'),
                      already_exists = false;

                  role_assignments_list.forEach(function (assignment) {
                    //console.log('assignment checking:', assignment.Role, assignment.User, assignment.Project);
                    //console.log('role:', role.name, role.id);
                    //console.log('user:', user.name, user.id);
                    //console.log('project:', project.name, project.id);
                    if (assignment.Role === role.id &&
                       assignment.Project === project.id &&
                       assignment.User === user.id) {
                      //console.warn('assignment already exists, skipping:', assignment, role, user, project);
                      already_exists = true;
                    }
                  });

                  if (!already_exists) {
                    p2
                    .command(u.format(
                      'openstack role add --project "%s" --user "%s" "%s"',
                      opts.project,
                      opts.user,
                      title
                    ))
                    ;
                  }
                }); // role assignment list
              }); // project show
            }); // user show
          }); // role show
        }); // role created or exists

      } else if (opts.ensure === 'absent') {
        if (roles_byName[title]) {
          // delete role
          console.info('Deleting openstack role', title);
          p2
          .command(u.format(
            'openstack role delete %s"',
            title
          ));
        }

      } else {
        return Q.reject(new Error('Invalid ensure'));
      }
    });
  }

})

;
