/*
    Partout [Everywhere] - Policy-Based Configuration Management for the
    Data-Driven-Infrastructure.

    Copyright (C) 2016 Graham Lee Bevan <graham.bevan@ntlworld.com>

    This file is part of Partout.

    Partout is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/*jslint node: true, nomen: true */
'use strict';
/*global p2*/

// make parent node_modules available to sync'd manifest
module.paths = module.paths.concat(module.parent.paths);

var utils = new (p2.require('utils'))(),
    u = require('util'),
    fs = require('fs'),
    path = require('path'),
    heredoc = require('heredoc'),
    uuid = require('uuid'),
    Q = require('q');

p2

/*
 * .openstack_service('keystone', {
 *   description: 'OpenStack Indentity',
 *   type: 'identity',
 *   ensure: 'present|absent'
 * })
 */
.role('openstack_service', {
  facts: function (deferred, facts_so_far, title, opts) {
    var facts = {};

    // OS_TOKEN="2b3dd0d669e505d07af7" OS_URL="http://controller1:35357/v3" OS_IDENTITY_API_VERSION=3 openstack service list -f json

    deferred.resolve(facts);
  },

  p2: function (title, opts) {

    // get status
    return utils.runCmd(u.format('openstack service show %s', title))
    .then(function (res) {
      var rc = res[0],
          stdout = res[1],
          stderr = res[2];
      //console.log('openstack_service: show: rc:', rc, stdout, stderr);

      if (opts.ensure === 'present') {
        if (rc !== 0) {
          // create service
          console.info('Creating openstack service ', title);
          p2
          .command(u.format(
            'openstack service create --name "%s" --description "%s" %s',
            title,
            (opts.description || title),
            opts.type
          ));
        }

      } else if (opts.ensure === 'absent') {
        if (rc === 0) {
          // delete service
          console.info('Deleting openstack service ', title);
          p2
          .command(u.format(
            'openstack service delete "%s"',
            title
          ));
        }

      } else {
        return Q.reject(new Error('Invalid ensure'));
      }
    });
  }

})

;
