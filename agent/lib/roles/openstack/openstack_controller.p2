/*
    Partout [Everywhere] - Policy-Based Configuration Management for the
    Data-Driven-Infrastructure.

    Copyright (C) 2016 Graham Lee Bevan <graham.bevan@ntlworld.com>

    This file is part of Partout.

    Partout is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/*jslint node: true, nomen: true */
'use strict';
/*global p2*/

// make parent node_modules available to sync'd manifest
module.paths = module.paths.concat(module.parent.paths);

var console = require('better-console'),
    heredoc = require('heredoc'),
    path = require('path'),
    u = require('util'),
    forge = require('node-forge'),
    pfs = new (p2.require('pfs'))();

p2

// TODO: move roles into partout itself
.include(path.join(__dirname, 'openstack_service'))
.include(path.join(__dirname, 'openstack_endpoint'))
.include(path.join(__dirname, 'openstack_domain'))
.include(path.join(__dirname, 'openstack_project'))
.include(path.join(__dirname, 'openstack_user'))
.include(path.join(__dirname, 'openstack_role'))
.include(path.join(__dirname, 'openstack_image'))

/**
 * p2
 * .openstack_controller('controller', {
 *   ip: 'contoller_ip_address',
 *   mysql_pass: 'password',
 *   rabbit_pass: 'password',
 *   keystone_pass: 'password',
 *   glance_pass: 'password',
 *   admin_user_pass: 'password',
 *   demo_user_pass: 'password',
 *   glance_user_pass: 'password',
 *   nova_db_pass: 'password',
 *   nova_user_pass: 'password',
 *   neutron_db_pass: 'password',
 *   neutron_user_pass: 'password'
 * })
 */
.role('openstack_controller', {
  p2: function (title, opts) {
    p2
    .node(function (f) {
      return f.os_dist_id === 'ubuntu' && p2.hasClass('openstack_controller');
    })


    /////////////////////////////
    // sysctl settings
    .file('/etc/sysctl.d/98-reserved-ports.conf', {
      ensure: 'present',
      content: {template: path.join(__dirname, 'files', 'controller', 'reserved-ports.conf')}
    })

    .on('file:/etc/sysctl.d/98-reserved-ports.conf:changed', function () {
      p2
      .command('sysctl --system')
      ;
    })


    /////////////////////////////
    // MariaDB/MySQL

    // TODO: Passing configs for silent installs needs to be supported by package module
    .command(u.format(heredoc(function () {/*
    echo 'mariadb-server-5.5  mysql-server/root_password  password "%s"' | debconf-set-selections;
    echo 'mariadb-server-5.5  mysql-server/root_password_again  password "%s"' | debconf-set-selections
    */}), opts.mysql_pass, opts.mysql_pass), {
      onlyif: function (f) {
        return !f.installed_packages['mariadb-server'];
      }
    })

    //.package('mariadb-server', {ensure: 'absent'})
    .package('mariadb-server', {ensure: 'present'})

    .command(heredoc(function () {/*
    echo 'mariadb-server-5.5  mysql-server/root_password  password "********"' | debconf-set-selections;
    echo 'mariadb-server-5.5  mysql-server/root_password_again  password "********"' | debconf-set-selections
    */}), {
      onlyif: '! (debconf-get-selections | grep \'^mariadb-server-5.5.*root_password_again[^*]*\\*\\*\\*\\*\\*\\*\\*\\*\' > /dev/null)'
    })

    .package('python-pymysql')
//    .package('PyMySQL', {
//      ensure: 'present',
//      provider: 'pip'
//    })

    .file('/etc/mysql/conf.d/openstack.cnf', {
      ensure: 'file',
      content: {template: path.join(__dirname, 'files', 'mysqld_openstack.template')},
      parms: {
        datetime: '' //new Date()  // XXX: force recreate every time - for testing events
      }
    })

    .service('mysql', {
      ensure: 'running',
      enabled: true,
      on: {
        'file:/etc/mysql/conf.d/openstack.cnf:changed': function () {
          p2
          .service('mysql', {ensure: 'stopped'})
          .service('mysql', {ensure: 'running'})
          .command('mysql_secure_installation', {
            cmd: u.format(heredoc(function () {/*
            sleep 5;
            cd /;
            mysql_secure_installation <<EOF

y
%s
%s
y
y
y
y
EOF
          */}), opts.mysql_pass, opts.mysql_pass)
          })
          ;
        }
      }
    })


    /////////////////////////////
    // MongoDB

    .package('mongodb-server')
    .package('mongodb-clients')
    .package('python-pymongo')

    .file('/etc/mongodb.conf', {
      content: {template: path.join(__dirname, 'files', 'mongodb.conf.template')},
      parms: {
        bind_ip: opts.ip
      }
    })

    .service('mongodb', {
      ensure: 'running',
      enabled: true,
      on: {
        'file:/etc/mongodb.conf:changed': function () {
          p2
          .service('mongodb', {ensure: 'stopped'})
          // rm /var/lib/mongodb/journal/prealloc.*   ???
          .service('mongodb', {ensure: 'running'})
          ;
        }
      }
    })


    /////////////////////////////
    // RabbitMQ

    .package('rabbitmq-server')

//    .service('rabbitmq-server', {
//      ensure: 'running'
//    })

    .on('package:rabbitmq-server:changed', function () {
      p2
      .command('rabbitmqctl add_user openstack \'{{ opts.parms.rabbit_pass }}\'', {
        parms: {
          rabbit_pass: opts.rabbit_pass
        }
      })
      .command('rabbitmqctl set_permissions openstack ".*" ".*" ".*"')
      ;
    })


    /////////////////////////////
    // Memcached

    .package('memcached')
    .package('python-memcache')

    .file('/etc/memcached.conf', {
      content: {template: path.join(__dirname, 'files', 'memcached.conf.template')},
      parms: {
        bind_ip: opts.ip
      }
    })

    .service('memcached', {
      ensure: 'running',
      enabled: true,
      on: {
        'file:/etc/memcached.conf:changed': function () {
          p2
          .service('memcached', {ensure: 'stopped'})
          .service('memcached', {ensure: 'running'})
          ;
        }
      }
    })


    /////////////////////////////
    // Connect to the database
    .mysql_connect(p2.facts.os_hostname, {
      //host: '127.0.0.1',
      socketPath: '/var/run/mysqld/mysqld.sock',
      user: 'root',
      password: opts.mysql_pass,
      debug: false
    })

    /////////////////////////////
    // Keystone

//    .mysql_database('keystone', {
//      ensure: 'absent',
//      connection: p2.facts.os_hostname
//    })

    .mysql_database('keystone', {
      ensure: 'present',
    })

    .mysql_grant('keystone localhost', {
      ensure: 'present',
      privileges: 'ALL PRIVILEGES',
      privlevel: 'keystone.*',
      userspecs: {user: 'keystone', host: 'localhost'},
      identifiedby: opts.keystone_pass
    })

    .mysql_grant('keystone %', {
      ensure: 'present',
      privileges: 'ALL PRIVILEGES',
      privlevel: 'keystone.*',
      userspecs: {user: 'keystone', host: '%'},
      identifiedby: opts.keystone_pass
    })

    // TODO: sysctl -w 'net.ipv4.ip_local_reserved_ports=35357'


    .file('/etc/init/keystone.override', {
      ensure: 'present',
      content: 'manual\n'
    })

    .package('keystone')
    .package('apache2')
    .package('libapache2-mod-wsgi')



    ///////////////////////////////////////////////////////////
    // Generate random admin token, if needed (initially)
    // TODO: use forge instead - var admin_token = forge.util.bytesToHex(forge.random.getBytesSync(10));
    .command('openstack_os_token', {
      cmd: 'openssl rand -hex 10 > {{{ f.cfg.PARTOUT_VARDIR }}}/openstack_os_token; chmod 600 {{{ f.cfg.PARTOUT_VARDIR }}}/openstack_os_token',
      creates: '{{{ f.cfg.PARTOUT_VARDIR }}}/openstack_os_token',
      onlyif: function (f) {
        return pfs.pExists(path.join('root', 'admin-openrc'))
        .then(function (exists) {
          return !exists;
        });
      }
    })

    .add_fact('openstack_os_token', {
      file: '{{{ f.cfg.PARTOUT_VARDIR }}}/openstack_os_token',
      hidden: true
    })

    .on('command:openstack_os_token:changed', function () {
      p2
      .set_env('OS_TOKEN', { value: '{{ f.openstack_os_token }}'})
      .set_env('OS_URL', { value: 'http://{{ f.os_hostname }}:35357/v3'})
      .set_env('OS_IDENTITY_API_VERSION', { value: 3})
      ;
    })



    .file('/etc/keystone/keystone.conf', {
      ensure: 'present',
      content:{template: path.join(__dirname, 'files', 'keystone.conf.template')},
      parms: {
        hostname: p2.facts.os_hostname,
        keystone_dbpass: opts.keystone_pass
      }
    })

    .on('file:/etc/keystone/keystone.conf:changed', function () {
      p2
      .command('su -s /bin/sh -c "keystone-manage db_sync" keystone')
      .command('keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone')
      ;
    })

    .file('/etc/apache2/apache2.conf', {
      ensure: 'present',
      content: {template: path.join(__dirname, 'files', 'apache2.conf.template')}
    })

    .file('/etc/apache2/sites-available/wsgi-keystone.conf', {
      ensure: 'present',
      content: {template: path.join(__dirname, 'files', 'wsgi-keystone.conf.template')}
    })

    .file('/etc/apache2/sites-enabled/wsgi-keystone.conf', {
      ensure: 'link',
      target: '/etc/apache2/sites-available/wsgi-keystone.conf'
    })


    .service('apache2', {
      ensure: 'running',
      enabled: true,
      on: {
        'file:/etc/apache2/sites-enabled/wsgi-keystone.conf:changed': function () {
          p2
          .service('apache2', {ensure: 'stopped'})
          .service('apache2', {ensure: 'running'})
          .command('rm -f /var/lib/keystone/keystone.db')
          ;
        }
      }
    })

    .source_env('/root/admin-openrc')

    .command('get openstack token', {
      cmd: 'openstack token issue -f json',
      onlyif: function (f) {
        return pfs.pExists(path.join('/', 'root', 'admin-openrc'))
        .then(function (exists) {

          if (!exists) {

            // fall back to initial install token
            p2
            .pushSteps()
            .set_env('OS_TOKEN', { value: '{{ f.openstack_os_token }}'})
            .set_env('OS_URL', { value: 'http://{{ f.os_hostname }}:35357/v3'})
            .set_env('OS_IDENTITY_API_VERSION', { value: 3})
            .flattenSteps()
            ;
          }

          return exists;
        });
      }
    }, function (rc, stdout, stderr) {
      var tok_obj = JSON.parse(stdout);

      // Use provided fernet token
      p2
      .pushSteps()
      //.set_env('OS_TOKEN', { value: tok_obj.id })
      .set_env('OS_TOKEN', { ensure: 'absent' })
      .set_env('OS_AUTH_URL', { value: 'http://{{ f.os_hostname }}:35357/v3'})
      //.set_env('OS_URL', { value: 'http://{{ f.os_hostname }}:35357/v3'})
      .set_env('OS_URL', { ensure: 'absent' })
      .set_env('OS_IDENTITY_API_VERSION', { value: 3})
      .flattenSteps()
      ;

    })

    .openstack_service('keystone', {
      description: 'OpenStack Identity',
      type: 'identity',
      ensure: 'present'
    })

    .openstack_endpoint('RegionOne/identity/public', {
      region: 'RegionOne',
      service_type: 'identity',
      interface: 'public',
      url: u.format('http://%s:5000/v3', p2.facts.os_hostname),
      ensure: 'present'
    })
    .openstack_endpoint('RegionOne/identity/internal', {
      region: 'RegionOne',
      service_type: 'identity',
      interface: 'internal',
      url: u.format('http://%s:5000/v3', p2.facts.os_hostname),
      ensure: 'present'
    })
    .openstack_endpoint('RegionOne/identity/admin', {
      region: 'RegionOne',
      service_type: 'identity',
      interface: 'admin',
      url: u.format('http://%s:35357/v3', p2.facts.os_hostname),
      ensure: 'present'
    })

    .openstack_domain('default', {
      description: 'Default Domain',
      ensure: 'present'
    })

    // Project Admin
    .openstack_project('admin', {
      description: 'Admin Project',
      domain: 'default',
      ensure: 'present'
    })

    .openstack_user('admin', {
      password: opts.admin_user_pass,
      domain: 'default',
      ensure: 'present'
    })

    .openstack_role('admin', {
      project: 'admin',
      user: 'admin',
      ensure: 'present'
    })

    // Project Service
    .openstack_project('service', {
      description: 'Service Project',
      domain: 'default',
      ensure: 'present'
    })

    // Project Demo
    .openstack_project('demo', {
      description: 'Demo Project',
      domain: 'default',
      ensure: 'present'
    })

    .openstack_user('demo', {
      password: opts.demo_user_pass,
      domain: 'default',
      ensure: 'present'
    })

    .openstack_role('user', {
      project: 'demo',
      user: 'demo',
      ensure: 'present'
    })


    // Create client environment scripts
    .file('/root/admin-openrc', {
      ensure: 'present',
      content: {template: path.join(__dirname, 'files', 'admin-openrc.template')},
      mode: '0700',
      owner: 'root',
      group: 'root',
      parms: {
        admin_user_pass: opts.admin_user_pass
      }
    })
    .file('/root/demo-openrc', {
      ensure: 'present',
      content: {template: path.join(__dirname, 'files', 'demo-openrc.template')},
      mode: '0700',
      owner: 'root',
      group: 'root',
      parms: {
        demo_user_pass: opts.demo_user_pass
      }
    })

    // remove admin_token_auth options for fernet tokens from now on
    .file('/etc/keystone/keystone-paste.ini', {
      ensure: 'present',
      content: {template: path.join(__dirname, 'files', 'keystone-paste.ini.template')}
    })

    // Need to remove old token prio to trying token issue for fernet
    .set_env('OS_TOKEN', { ensure: 'absent' })
    .set_env('OS_URL', { ensure: 'absent' })

    .source_env('/root/admin-openrc')

    // TODO: Clean this up as its a repeat of earlier
    .command('get openstack token #2', {
      cmd: 'openstack token issue -f json'
    }, function (rc, stdout, stderr) {
      if (rc !== 0) {
        //console.error('openstack token #2 rc:', rc, 'stdout:', stdout, 'stderr:', stderr);
        throw new Error(stderr);
      }
      var tok_obj = JSON.parse(stdout);

      // Use provided fernet token
      p2
      .pushSteps()
      //.set_env('OS_TOKEN', { value: tok_obj.id })
      .set_env('OS_TOKEN', { ensure: 'absent' })
      .set_env('OS_AUTH_URL', { value: 'http://{{ f.os_hostname }}:35357/v3'})
      //.set_env('OS_URL', { value: 'http://{{ f.os_hostname }}:35357/v3'})
      .set_env('OS_IDENTITY_API_VERSION', { value: 3})
      .flattenSteps()
      ;

    })



    /////////////////////////////
    // Glance

    .mysql_database('glance', {
      ensure: 'present',
    })

    .mysql_grant('glance localhost', {
      ensure: 'present',
      privileges: 'ALL PRIVILEGES',
      privlevel: 'glance.*',
      userspecs: {user: 'glance', host: 'localhost'},
      identifiedby: opts.glance_pass
    })

    .mysql_grant('glance %', {
      ensure: 'present',
      privileges: 'ALL PRIVILEGES',
      privlevel: 'glance.*',
      userspecs: {user: 'glance', host: '%'},
      identifiedby: opts.glance_pass
    })

    .openstack_user('glance', {
      password: opts.glance_user_pass,
      domain: 'default',
      ensure: 'present'
    })

    .openstack_role('admin', {
      project: 'service',
      user: 'glance',
      ensure: 'present'
    })

    .openstack_service('glance', {
      description: 'OpenStack Image',
      type: 'image',
      ensure: 'present'
    })

    .openstack_endpoint('RegionOne/image/public', {
      region: 'RegionOne',
      service_type: 'image',
      interface: 'public',
      url: u.format('http://%s:9292', p2.facts.os_hostname),
      ensure: 'present'
    })

    .openstack_endpoint('RegionOne/image/internal', {
      region: 'RegionOne',
      service_type: 'image',
      interface: 'internal',
      url: u.format('http://%s:9292', p2.facts.os_hostname),
      ensure: 'present'
    })

    .openstack_endpoint('RegionOne/image/admin', {
      region: 'RegionOne',
      service_type: 'image',
      interface: 'admin',
      url: u.format('http://%s:9292', p2.facts.os_hostname),
      ensure: 'present'
    })

    .package('glance')

    .file('/etc/glance/glance-api.conf', {
      ensure: 'present',
      content:{template: path.join(__dirname, 'files', 'glance-api.conf.template')},
      parms: {
        hostname: p2.facts.os_hostname,
        glance_dbpass: opts.glance_pass,
        glance_user_pass: opts.glance_user_pass
      }
    })

    .service('glance-api', {
      ensure: 'running',
      enabled: true,
      on: {
        'file:/etc/glance/glance-api.conf:changed': function () {
          p2
          .command('su -s /bin/sh -c "glance-manage db_sync" glance')
          .service('glance-api', { ensure: 'stopped'})
          .service('glance-api', { ensure: 'running'})
          ;
        }
      }
    })

    .file('/etc/glance/glance-registry.conf', {
      ensure: 'present',
      content:{template: path.join(__dirname, 'files', 'glance-registry.conf.template')},
      parms: {
        hostname: p2.facts.os_hostname,
        glance_dbpass: opts.glance_pass,
        glance_user_pass: opts.glance_user_pass
      }
    })

    .service('glance-registry', {
      ensure: 'running',
      enabled: true,
      on: {
        'file:/etc/glance/glance-registry.conf:changed': function () {
          p2
          //.command('su -s /bin/sh -c "glance-manage db_sync" glance')
          .service('glance-registry', { ensure: 'stopped'})
          .service('glance-registry', { ensure: 'running'})
          //.service('glance-api', { ensure: 'stopped'})
          //.service('glance-api', { ensure: 'running'})
          ;
        }
      }
    })

    // Download and create cirros image
//    .command('wget http://download.cirros-cloud.net/0.3.4/cirros-0.3.4-x86_64-disk.img -O /tmp/cirros.img', {
//      creates: '/tmp/cirros.img'
//    })
//
//    .openstack_image('cirros', {
//      ensure: 'absent'
//    })
//
//    .openstack_image('cirros', {
//      file: '/tmp/cirros.img',
//      public: true
//    })
//
//    .openstack_image('cirros', {
//      ensure: 'absent'
//    })

    .openstack_image('cirros', {
      url: 'http://download.cirros-cloud.net/0.3.4/cirros-0.3.4-x86_64-disk.img',
      public: true
    })


    ///////////////////////////////////////
    // COMPUTE

    .mysql_database('nova_api', {
      ensure: 'present',
    })
    .mysql_database('nova', {
      ensure: 'present',
    })

    .mysql_grant('nova_api localhost', {
      ensure: 'present',
      privileges: 'ALL PRIVILEGES',
      privlevel: 'nova_api.*',
      userspecs: {user: 'nova', host: 'localhost'},
      identifiedby: opts.nova_db_pass
    })
    .mysql_grant('nova_api %', {
      ensure: 'present',
      privileges: 'ALL PRIVILEGES',
      privlevel: 'nova_api.*',
      userspecs: {user: 'nova', host: '%'},
      identifiedby: opts.nova_db_pass
    })

    .mysql_grant('nova localhost', {
      ensure: 'present',
      privileges: 'ALL PRIVILEGES',
      privlevel: 'nova.*',
      userspecs: {user: 'nova', host: 'localhost'},
      identifiedby: opts.nova_db_pass
    })
    .mysql_grant('nova %', {
      ensure: 'present',
      privileges: 'ALL PRIVILEGES',
      privlevel: 'nova.*',
      userspecs: {user: 'nova', host: '%'},
      identifiedby: opts.nova_db_pass
    })

    .openstack_user('nova', {
      password: opts.nova_user_pass,
      domain: 'default',
      ensure: 'present'
    })

    .openstack_role('admin', {
      project: 'service',
      user: 'nova',
      ensure: 'present'
    })

    .openstack_service('nova', {
      description: 'OpenStack Compute',
      type: 'compute',
      ensure: 'present'
    })

    .openstack_endpoint('RegionOne/compute/public', {
      region: 'RegionOne',
      service_type: 'compute',
      interface: 'public',
      url: u.format('http://%s:8774/v2.1/%\\(tenant_id\\)s', p2.facts.os_hostname),
      ensure: 'present'
    })

    .openstack_endpoint('RegionOne/compute/internal', {
      region: 'RegionOne',
      service_type: 'compute',
      interface: 'internal',
      url: u.format('http://%s:8774/v2.1/%\\(tenant_id\\)s', p2.facts.os_hostname),
      ensure: 'present'
    })

    .openstack_endpoint('RegionOne/compute/admin', {
      region: 'RegionOne',
      service_type: 'compute',
      interface: 'admin',
      url: u.format('http://%s:8774/v2.1/%\\(tenant_id\\)s', p2.facts.os_hostname),
      ensure: 'present'
    })

    .package('nova-api')
    .package('nova-conductor')
    .package('nova-consoleauth')
    .package('nova-novncproxy')
    .package('nova-scheduler')

    .file('/etc/nova/nova.conf', {
      ensure: 'present',
      content:{template: path.join(__dirname, 'files', 'controller', 'nova_template.conf')},
      parms: {
        nova_db_pass: opts.nova_db_pass,
        nova_user_pass: opts.nova_user_pass,
        neutron_user_pass: opts.neutron_user_pass,
        rabbit_pass: opts.rabbit_pass,
        metadata_secret: opts.metadata_secret
      }
    })

    .on('file:/etc/nova/nova.conf:changed', function () {
      p2
      .command('populate nova api_db', {
        cmd: heredoc(function () {/*
          su -s /bin/sh -c "nova-manage api_db sync" nova && \
          touch {{{ f.cfg.PARTOUT_VARDIR }}}/populated_nova_api_database
        */}),
        creates: '{{{ f.cfg.PARTOUT_VARDIR }}}/populated_nova_api_database'
      })
      .command('populate nova db', {
        cmd: heredoc(function () {/*
          su -s /bin/sh -c "nova-manage db sync" nova && \
          touch {{{ f.cfg.PARTOUT_VARDIR }}}/populated_nova_database
        */}),
        creates: '{{{ f.cfg.PARTOUT_VARDIR }}}/populated_nova_database'
      })
      .service('nova-api', { ensure: 'stopped' })
      .service('nova-consoleauth', { ensure: 'stopped' })
      .service('nova-scheduler', { ensure: 'stopped' })
      .service('nova-conductor', { ensure: 'stopped' })
      .service('nova-novncproxy', { ensure: 'stopped' })
      ;
    })

    .service('nova-api', { ensure: 'running', enabled: true })
    .service('nova-consoleauth', { ensure: 'running', enabled: true })
    .service('nova-scheduler', { ensure: 'running', enabled: true })
    .service('nova-conductor', { ensure: 'running', enabled: true })
    .service('nova-novncproxy', { ensure: 'running', enabled: true })


    //////////////////////////////////////////
    // NETWORK - Neutron

    .mysql_database('neutron', {
      ensure: 'present',
    })

    .mysql_grant('neutron localhost', {
      ensure: 'present',
      privileges: 'ALL PRIVILEGES',
      privlevel: 'neutron.*',
      userspecs: {user: 'neutron', host: 'localhost'},
      identifiedby: opts.neutron_db_pass
    })
    .mysql_grant('neutron %', {
      ensure: 'present',
      privileges: 'ALL PRIVILEGES',
      privlevel: 'neutron.*',
      userspecs: {user: 'neutron', host: '%'},
      identifiedby: opts.neutron_db_pass
    })

    .openstack_user('neutron', {
      password: opts.neutron_user_pass,
      domain: 'default',
      ensure: 'present'
    })

    .openstack_role('admin', {
      project: 'service',
      user: 'neutron',
      ensure: 'present'
    })

    .openstack_service('neutron', {
      description: 'OpenStack Networking',
      type: 'network',
      ensure: 'present'
    })

    .openstack_endpoint('RegionOne/network/public', {
      region: 'RegionOne',
      service_type: 'network',
      interface: 'public',
      url: u.format('http://%s:9696', p2.facts.os_hostname),
      ensure: 'present'
    })

    .openstack_endpoint('RegionOne/network/internal', {
      region: 'RegionOne',
      service_type: 'network',
      interface: 'internal',
      url: u.format('http://%s:9696', p2.facts.os_hostname),
      ensure: 'present'
    })

    .openstack_endpoint('RegionOne/compute/admin', {
      region: 'RegionOne',
      service_type: 'network',
      interface: 'admin',
      url: u.format('http://%s:9696', p2.facts.os_hostname),
      ensure: 'present'
    })

    /*
     * Networking Option 2: Self-Service Networks
     */
    .package('neutron-server')
    .package('neutron-plugin-ml2')
    .package('neutron-linuxbridge-agent')
    .package('neutron-l3-agent')
    .package('neutron-dhcp-agent')
    .package('neutron-metadata-agent')

    .file('/etc/neutron/neutron.conf', {
      ensure: 'present',
      content:{template: path.join(__dirname, 'files', 'controller', 'neutron_template.conf')},
      parms: {
        neutron_db_pass: opts.neutron_db_pass,
        neutron_user_pass: opts.neutron_user_pass,
        rabbit_pass: opts.rabbit_pass,
        nova_user_pass: opts.nova_user_pass
      }
    })

    .file('/etc/neutron/plugins/ml2/ml2_conf.ini', {
      ensure: 'present',
      content:{template: path.join(__dirname, 'files', 'controller', 'ml2_conf_template.ini')}
    })

    .file('/etc/neutron/plugins/ml2/linuxbridge_agent.ini', {
      ensure: 'present',
      content:{template: path.join(__dirname, 'files', 'controller', 'linuxbridge_agent_template.ini')}
    })

    .file('/etc/neutron/l3_agent.ini', {
      ensure: 'present',
      content:{template: path.join(__dirname, 'files', 'controller', 'l3_agent_template.ini')}
    })

    .file('/etc/neutron/dhcp_agent.ini', {
      ensure: 'present',
      content:{template: path.join(__dirname, 'files', 'controller', 'dhcp_agent_template.ini')}
    })

    .file('/etc/neutron/metadata_agent.ini', {
      ensure: 'present',
      content:{template: path.join(__dirname, 'files', 'controller', 'metadata_agent_template.ini')},
      parms: {
        metadata_secret: opts.metadata_secret
      }
    })

    .command('populate neutron db', {
      cmd: heredoc(function () {/*
        su -s /bin/sh -c "neutron-db-manage --config-file /etc/neutron/neutron.conf \
          --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head" neutron && \
          touch {{{ f.cfg.PARTOUT_VARDIR }}}/populated_neutron_database
      */}),
      creates: '{{{ f.cfg.PARTOUT_VARDIR }}}/populated_neutron_database'
    })

    .on('command:populate neutron db:changed', function () {
      p2
      .service('nova-api', { ensure: 'stopped'})
      .service('neutron-server', { ensure: 'stopped'})
      .service('neutron-linuxbridge-agent', { ensure: 'stopped'})
      .service('neutron-dhcp-agent', { ensure: 'stopped'})
      .service('neutron-metadata-agent', { ensure: 'stopped'})
      .service('neutron-l3-agent', { ensure: 'stopped'})
      ;
    })

    .service('nova-api', { ensure: 'running', enabled: true})
    .service('neutron-server', { ensure: 'running', enabled: true})
    .service('neutron-linuxbridge-agent', { ensure: 'running', enabled: true})
    .service('neutron-dhcp-agent', { ensure: 'running', enabled: true})
    .service('neutron-metadata-agent', { ensure: 'running', enabled: true})
    .service('neutron-l3-agent', { ensure: 'running', enabled: true})


    //////////////////////////////////////////
    // Horizon Dashboard

    .package('openstack-dashboard')

    .file('/etc/openstack-dashboard/local_settings.py', {
      ensure: 'present',
      content:{template: path.join(__dirname, 'files', 'controller', 'dashboard_local_settings_template.py')}
    })
    .on('file:/etc/openstack-dashboard/local_settings.py:changed', function () {
      p2
      .command('service apache2 reload')
      ;
    })

    ;
  } // p2
}) // role openstack_controller

;
