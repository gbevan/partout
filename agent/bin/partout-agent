#!/usr/bin/env node

/*
    Partout [Everywhere] - Policy-Based Configuration Management for the
    Data-Driven-Infrastructure.

    Copyright (C) 2015  Graham Lee Bevan <graham.bevan@ntlworld.com>

    This file is part of Partout.

    Partout is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/*jslint node: true */
'use strict';

var console = require('better-console'),
    args = require('args'),
    options = args.Options.parse([
      {
        name: 'help',
        shortName: 'h',
        type: 'bool',
        help: 'Show this help'
      },
      {
        name: 'verbose',
        shortName: 'v',
        type: 'bool',
        help: 'Show verbose messages'
      },
      {
        name: 'debug',
        shortName: 'd',
        type: 'bool',
        help: 'Show debugging messages'
      },
      {
        name: 'timing',
        shortName: 't',
        type: 'bool',
        help: 'Show timing log messages'
      },
      {
        name: 'env',
        shortName: 'e',
        type: 'string',
        help: 'Specify agent\'s environment'
      },
      {
        name: 'once',
        shortName: '1',
        type: 'bool',
        help: 'Apply policy once and exit (allows for CSR signing and install process)'
      },
      {
        name: 'yes',
        shortName: 'y',
        type: 'bool',
        help: 'Assume yes to any questions, including accepting the master\'s ssl certificate fingerprint'
      }
    ]),
    parser = args.parser(process.argv),
    parsed = parser.parse(options, {onPositional: 'stop'}),
    rest = parser.getRest();

if (parsed.help) {
  console.log(options.getHelp());
  console.log('\nCommands:\n\tfacts\n\tapply file.p2\n\tserver (default)');
  process.exit(0);
}

if (parsed.debug) {
  parsed.verbose = true;
}

//console.log('parsed:', parsed);

/*
 * validate minimum version of node
 */
var node_version = parseInt((process.versions.node.match(/^(\d+)/))[1]);
if (node_version < 4) {
  console.error('Error: Node must be at minimum version of 4');
  process.exit(1);
}

delete global.p2;
delete global.P2;

// make options like verbose global
global.partout = {};
global.partout.opts = parsed;

/*
 * partout-agent [apply | serve] site.json ...
 */

var opts = parsed;

if (rest.length > 0) {
  opts[rest.shift()] = true;
  opts.args = rest;
} else {
  opts.serve = true;
  opts.apply = false;
}

var app = require('../app')(opts);
